import Head from "next/head";
import { Box, Button, Flex, Heading } from "@chakra-ui/react";
import React, { useEffect, useState } from "react";
import {
  animated,
  useChain,
  useSpring,
  useSpringRef,
  useTransition,
} from "react-spring";

const initialTasks = [
  {
    id: 0,
    name: "Drink coffee",
  },
  {
    id: 1,
    name: "Pet my dog",
  },
  {
    id: 2,
    name: "Make a side project :)",
  },
];

type Task = {
  id: number;
  name: string;
};

export default function TODO() {
  const [status, setStatus] = useState<"stall" | "bootstrapping" | "done">(
    "stall"
  );
  const [page, setPage] = useState<"app" | "thankyou">();

  const [tasks, setTasks] = useState<Task[]>(initialTasks);

  const [loadingNum, loadingNumApi] = useSpring(() => ({
    from: {
      number: 0,
    },
    onRest: () => {
      setStatus("done");
      setPage("app");
    },
  }));

  const transitionRef = useSpringRef();

  const transition = useTransition(tasks, {
    ref: transitionRef,
    trail: 1000 / tasks.length,
    from: { opacity: 0, scale: 0 },
    enter: { opacity: 1, scale: 1 },
    leave: { opacity: 0, scale: 0 },
  });

  const boxShrinkRef = useSpringRef();

  const boxShrinkStyle = useSpring({
    ref: boxShrinkRef,
    from: {
      size: tasks.length > 0 ? "0%" : "100%",
    },
    to: {
      size: tasks.length > 0 ? "100%" : "0%",
    },
    onRest: tasks.length > 0 ? () => {} : () => setPage("thankyou"),
  });

  const textRef = useSpringRef();

  const textStyle = useSpring({
    ref: textRef,
    from: {
      marginTop: "100px",
      opacity: 0,
    },
    to: {
      marginTop: "0px",
      opacity: 1,
    },
  });

  useChain(tasks.length > 0 ? [] : [boxShrinkRef, textRef], [0.5, 1]);

  useChain(page === "app" ? [boxShrinkRef, transitionRef] : [], [0.5, 1]);

  return (
    <>
      <Head>
        <title>React Spring Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        flexDirection="column"
        justifyContent="center"
        alignItems="center"
        w="full"
        h="100vh"
        position="relative"
      >
        {page === undefined && (
          <>
            <Heading fontSize="2xl" mb={2}>
              Welcome to Todo App
            </Heading>
            {status !== "stall" && (
              <Heading fontSize="lg">
                <animated.span>
                  {loadingNum.number.to((n) => n.toFixed(1))}
                </animated.span>
                %
              </Heading>
            )}
            {status === "stall" && (
              <Button
                onClick={() => {
                  setStatus("bootstrapping");
                  loadingNumApi.start({ to: { number: 100 } });
                }}
              >
                Load
              </Button>
            )}
          </>
        )}
        {status === "done" && (
          <Flex
            flexDirection="column"
            justifyContent="center"
            alignItems="center"
            w="full"
            h="full"
          >
            {page === "app" && (
              <animated.div
                style={{
                  width: boxShrinkStyle.size,
                  height: boxShrinkStyle.size,
                  overflow: "hidden",
                  position: "absolute",
                }}
              >
                <Flex
                  pos="absolute"
                  flexDir="column"
                  p={2}
                  bg="gray"
                  alignItems="center"
                  justifyContent="center"
                  w="full"
                  height="full"
                  position="relative"
                >
                  {transition((style, task) => (
                    <animated.div style={{ ...style, width: "100%" }}>
                      <Flex
                        w="full"
                        key={task.id}
                        shadow="md"
                        p={4}
                        bg="white"
                        mb={2}
                        alignItems="center"
                      >
                        <Heading fontSize="lg">{task.name}</Heading>
                        <Button
                          onClick={() =>
                            setTasks(tasks.filter((t) => t.id !== task.id))
                          }
                          ml="auto"
                          colorScheme="pink"
                        >
                          Resolve
                        </Button>
                      </Flex>
                    </animated.div>
                  ))}
                </Flex>
              </animated.div>
            )}
            {status === "done" && page === "thankyou" && (
              <animated.div style={textStyle}>
                <Heading color="#222">All tasks done üçª</Heading>
              </animated.div>
            )}
          </Flex>
        )}
      </Flex>
    </>
  );
}
